DATA : v_plant type MARD-werks.
SELECT-options p_plant for v_plant.
Data : v_matnr type MARD-matnr.
SELECT-options s_matnr for v_matnr.

Types : begin of ty_mard,
        matnr type mard-matnr,
        werks type mard-werks,
        lgort type mard-lgort,
end of ty_mard.

Types : begin of ty_makt,
        matnr type makt-matnr,
        maktx type makt-maktx,
  end of ty_makt.

TYPES: BEGIN OF ty_t001,
         werks type t001w-werks,
         name1 TYPE t001W-name1,
       END OF ty_t001.
types:begin of ty_range,
  sign type char1,
  opti type char2,
  low type matnr,
  high type matnr,
  end of ty_range.


DATA :it_mard type table of ty_mard,
      wa_mard like line of it_mard.
DATA :it_makt type table of ty_makt,
      wa_makt like line of it_makt.


DATA: it_t001w TYPE TABLE OF ty_t001,
      wa_t001w LIKE LINE OF it_t001w.

DATA :it_ranged  type standard table of ty_range.


DATA :it_ranges type standard table of ty_range.



data :wa_range type ty_range.

data :it_plantcheck type table of zcheck_plant,
      wa_plantcheck like line of it_plantcheck.



Select matnr werks lgort from mard into table it_mard where werks in p_plant[] and matnr in s_matnr.
If it_mard is not initial.
Select matnr maktx from makt into table it_makt for all entries in it_mard where MATNR EQ it_mard-matnr  and spras eq sy-langu.
endif.

SELECT SINGLE werks name1 FROM t001w INTO wa_t001w WHERE werks IN p_plant[].
*select  sign opti low high from zcheck_plant into table it_range.

Select * from zcheck_plant into table it_plantcheck.
*Write : / 'plant no',
*      20 'plant',
*      30'storage location',
*      50 'material description',
*      80'plant_name'.
*SORT it_mard by MATNR.
*LOOP AT it_mard INTO wa_mard.
*Read table it_makt into wa_makt with key matnr = wa_mard-matnr.
*Read table it_t001w into wa_t001w with key werks = wa_mard-werks.
*Read table it_dan into wa_dan with key matnr = wa_mard-matnr.

Loop at it_plantcheck into wa_plantcheck.
  if wa_plantcheck-name EQ 'DANGER'.
    MOVE-CORRESPONDING wa_plantcheck to wa_range.
    append wa_range to it_ranged.
    ELSEIF wa_plantcheck-name EQ 'SAFE'.
     MOVE-CORRESPONDING wa_plantcheck TO wa_range.
     APPEND wa_range TO it_ranges.
   ENDIF.
   CLEAR wa_range.
 ENDLOOP.
 SORT it_mard by MATNR.
LOOP AT it_mard INTO wa_mard.
Read table it_makt into wa_makt with key matnr = wa_mard-matnr.
Read table it_t001w into wa_t001w with key werks = wa_mard-werks.


*Read table it_dan into wa_dan with key matnr = wa_mard-matnr.
IF wa_mard-matnr in it_ranged.

FORMAT COLOR COL_NEGATIVE.
WRITE : / wa_mard-matnr,
          20 wa_mard-werks,
          30 wa_mard-lgort,
           50 wa_makt-maktx LEFT-JUSTIFIED,
           80 wa_t001w-name1.
*          FORMAT COLOR OFF.
          ELSEIF wa_mard-matnr in it_ranges.
          FORMAT COLOR COL_POSITIVE.

WRITE : / wa_mard-matnr,
          20 wa_mard-werks,
          30 wa_mard-lgort,
           50 wa_makt-maktx LEFT-JUSTIFIED,
           80 wa_t001w-name1.
          else.

WRITE : / wa_mard-matnr,
          20 wa_mard-werks,
          30 wa_mard-lgort,
           50 wa_makt-maktx LEFT-JUSTIFIED,
           80 wa_t001w-name1.
          Format color off.

endif.

endloop.